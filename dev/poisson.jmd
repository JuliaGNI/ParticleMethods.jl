```@meta
CurrentModule = Particles
```

# Poisson Solvers


```julia
using Distributions
using Particles
using Plots
using Random
using StatsBase

np = 10000
xp = zeros(np)
rand!(MersenneTwister(0), Normal(0.5, 0.1), xp)

x = LinRange(0, 1, 100)
y = fit(Histogram, xp, x).weights ./ length(x)
x = x[1:end-1] .+ (x[2] - x[1]) / 2

plot(x, y; xlims = (0,1), xlabel = "x", ylabel = "n", legend = :none)
```


## FFT Solver

```julia
p = PoissonSolverFFT(32, 1.0)
Particles.solve!(p, xp);
```


```julia
plot(x, eval_density(p, x); xlims = (0,1), xlabel = "x", ylabel = "ρ(x)", legend = :none)
```

```julia
plot(x, eval_potential(p, x); xlims = (0,1), xlabel = "x", ylabel = "ϕ(x)", legend = :none)
```

```julia
plot(x, eval_field(p, x); xlims = (0,1), xlabel = "x", ylabel = "E(x)", legend = :none)
```


## B-Spline Solver

```julia
p = PoissonSolverPBSplines(3, 32, 1.0)
Particles.solve!(p, xp);
```


```julia
plot(x, eval_density(p, x); xlims = (0,1), xlabel = "x", ylabel = "ρ(x)", legend = :none)
```

```julia
plot(x, eval_potential(p, x); xlims = (0,1), xlabel = "x", ylabel = "ϕ(x)", legend = :none)
```

```julia
plot(x, eval_field(p, x); xlims = (0,1), xlabel = "x", ylabel = "E(x)", legend = :none)
```
